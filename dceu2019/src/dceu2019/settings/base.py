"""
Django settings for dceu2019 project.

Generated by 'django-admin startproject' using Django 2.0.9.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import pathlib

from django.urls.base import reverse_lazy
from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: str(BASE_DIR / "static")
BASE_DIR = pathlib.Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'djmoney',
    'sorl.thumbnail',
    "dceu2019.apps.pretalx_utils",
    "dceu2019.apps.invoices",
    "dceu2019.apps.ticketholders",
]

# Settings from Pretalx
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Security first
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Next up: static files
    'django.middleware.common.CommonMiddleware',  # Set some sensible defaults, now, before responses are modified
    'pretalx.common.middleware.SessionMiddleware',  # Add session handling
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Uses sessions
    'pretalx.common.auth.AuthenticationTokenMiddleware',  # Make auth tokens work
    'pretalx.common.middleware.MultiDomainMiddleware',  # Check which host is used and if it is valid
    'pretalx.common.middleware.EventPermissionMiddleware',  # Sets locales, request.event, available events, etc.
    'pretalx.common.middleware.CsrfViewMiddleware',  # Protect against CSRF attacks before forms/data are processed
    'django.contrib.messages.middleware.MessageMiddleware',  # Uses sessions
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Protects against clickjacking
    'csp.middleware.CSPMiddleware',  # Modifies/sets CSP headers
]

ROOT_URLCONF = "dceu2019.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(BASE_DIR / "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.debug",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.request",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "dceu2019.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 9,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGES = [('en', _('English')), ('de', _('German')), ('fr', _('French'))]
LANGUAGE_CODE = "en-us"

LOCALE_PATHS = [str(BASE_DIR / "locale")]

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = str(BASE_DIR.parent.parent / "staticfiles")

STATICFILES_DIRS = [str(BASE_DIR / "static")]

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

# Media files (uploaded by a user)
# https://docs.djangoproject.com/en/2.0/topics/files/

MEDIA_URL = "/media/"

MEDIA_ROOT = str(BASE_DIR.parent.parent / "media")


COMPRESS_PRECOMPILERS = (('text/x-scss', 'django_libsass.SassCompiler'),)
COMPRESS_CSS_FILTERS = (
    # CssAbsoluteFilter is incredibly slow, especially when dealing with our _flags.scss
    # However, we don't need it if we consequently use the static() function in Sass
    # 'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.CSSCompressorFilter',
)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(server_time)s] %(message)s',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'console_debug_false': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'console_debug_false', 'mail_admins'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        }
    }
}

BILLY_TOKEN = 'set in local.py'
BILLY_TICKET_ACCOUNT = 'set in local.py'
TICKETBUTLER_API = 'set in local.py'
TICKETBUTLER_TOKEN = 'set in local.py'

CURRENCIES = ('DKK', 'EUR')

LOGIN_REDIRECT_URL = '/'
LOGIN_URL = reverse_lazy('ticketholders:login')
LOGOUT_URL = reverse_lazy('ticketholders:logout')
